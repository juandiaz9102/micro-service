name: Build
on:
  label:
    types:
      - created
  push:
    branches:
      - main # or the name of your main branch

jobs:
  Test-sonar:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Test
        env:
          GITHUB_USERNAME: ${{ secrets.USER_NAME }}
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}
        run: mvn clean test -DuniqueVersion=false -Dmaven.source.useDefaultManifestFile=true -Dmaven.source.includePom=true -DaltDeploymentRepository='github::default::https://maven.pkg.github.com/everisopennetworks/ffm-ne-back-jv-lib-commons'
      - name: Lista
        run: |
          cd target
          ls -la
      - uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          LC_ALL: "ru_RU.UTF-8"
      - name: SonarQube Quality Gate check
        uses: sonarsource/sonarqube-quality-gate-action@master
        continue-on-error: true
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          scanMetadataReportFile: .scannerwork/report-task.txt
          # Force to fail step after specific time
          timeout-minutes: 1

  publish-artifact-build_image:
    runs-on: ubuntu-latest
    needs: [Test-sonar]
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Set up Maven Settings for deploy
        uses: s4u/maven-settings-action@v2.1.1
      - name: Publish package
        env:
          GITHUB_USERNAME: ${{ secrets.USER_NAME }}
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}
        run: mvn deploy -DuniqueVersion=false -Dmaven.source.useDefaultManifestFile=true -Dmaven.source.includePom=true -DaltDeploymentRepository='github::default::https://maven.pkg.github.com/everisopennetworks/ffm-fc-back-jv-mse-serviceordermgmt'

      - name: Lista
        run: |
          cd target
          ls -la
      - name: versiones tag
        run: git fetch --prune --unshallow --tags
      - name: latest tag
        run: echo "LATEST_TAG=$(git describe --tag --abbrev=0 | cut -c 2-)" >> $GITHUB_ENV
      - name: use env var
        run: echo ${{ env.LATEST_TAG }}
      - name: Configure AWS Credentials for build and deploy
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ECR_ACCESS_ID }}
          aws-secret-access-key: ${{ secrets.ECR_SECRET_KEY }}
          aws-region: us-east-2
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, Tag, and Push the Image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: squad-integration-dev
          IMAGE_TAG: serviceorder-${{env.LATEST_TAG}}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      - name: docker images
        run: docker images

      - name: 'Build and push image'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.AZURE_REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.AZURE_REGISTRY_USERNAME }}
          password: ${{ secrets.AZURE_REGISTRY_PASSWORD }}
      - name: ecr azure
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: squad-integration
          IMAGE_TAG: serviceorder-${{env.LATEST_TAG}}
        run: |
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG azacreu2ossd01.azurecr.io/$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker images
          docker push azacreu2ossd01.azurecr.io/$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG